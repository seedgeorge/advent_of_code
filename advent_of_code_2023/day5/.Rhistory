patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
# apply filter
patient_subset_filtered = patient_subset[,patient_subset$goodcells == TRUE]
#patient_subset_filtered = findOutliers(patient_subset_filtered,resolution = 0.8)
#patient_subset_filtered = patient_subset_filtered[,patient_subset_filtered$outlier == FALSE & patient_subset_filtered$is_aneuploid == TRUE]
#patient_subset_filtered = patient_subset_filtered[,patient_subset_filtered$is_aneuploid == TRUE]
plotHeatmap(patient_subset_filtered,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
# make a new filtered column
patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
patient_subset$overdispersion < 0.15
# apply filter
patient_subset_filtered = patient_subset[,patient_subset$goodcells == TRUE]
#patient_subset_filtered = findOutliers(patient_subset_filtered,resolution = 0.8)
#patient_subset_filtered = patient_subset_filtered[,patient_subset_filtered$outlier == FALSE & patient_subset_filtered$is_aneuploid == TRUE]
patient_subset_filtered = patient_subset_filtered[,patient_subset_filtered$is_aneuploid == TRUE]
plotHeatmap(patient_subset_filtered,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
#
# # knnsmooth
patient_subset_filtered_smoothed = my_knnSmooth(patient_subset_filtered,gamma=10,k = 3)
patient_subset_filtered_smoothed = findOutliers(patient_subset_filtered_smoothed,resolution = 0.8)
patient_subset_filtered_smoothed = patient_subset_filtered_smoothed[,patient_subset_filtered_smoothed$outlier == FALSE & patient_subset_filtered_smoothed$is_aneuploid == TRUE]
plotHeatmap(patient_subset_filtered_smoothed,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
plotHeatmap(patient_subset_filtered_smoothed,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("is_aneuploid"))
plotHeatmap(patient_subset_filtered_smoothed,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
my_runSegmentation
apply(patient_subset)$segment_ratios
patient_subset)$segment_ratios
patient_subset$segment_ratios
assays(patient_subset)$segment_ratios
apply(assays(patient_subset)$segment_ratios,2,max)
hist(apply(assays(patient_subset)$segment_ratios,2,max))
hist(apply(assays(patient_subset)$segment_ratios,2,max),breaks=20)
apply(assays(patient_subset)$segment_ratios,2,max)
patient_subset$segment_max = apply(assays(patient_subset)$segment_ratios,2,max)
patient_subset$segment_median = apply(assays(patient_subset)$segment_ratios,2,median)
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median"))
patient_subset$segment_max = log2(apply(assays(patient_subset)$segment_ratios,2,max))
patient_subset$segment_median = log2(apply(assays(patient_subset)$segment_ratios,2,median))
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median"))
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median"))
# make a new filtered column
patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median"),row_split = "goodcells")
# make a new filtered column
patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median"),
row_split = "goodcells")
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells"),
row_split = "goodcells")
# make a new filtered column
patient_subset$goodcells = patient_subset$ratio_iqr < 0.25 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells"),
row_split = "goodcells")
# make a new filtered column
patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells"),
row_split = "goodcells")
5e7
5e5
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells","is_aneuploid"),
row_split = "goodcells")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
patient_subset_filtered= my_knnSmooth(patient_subset,gamma=10,k = 3)
plotHeatmap(patient_subset_filtered,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
patient_subset_filtered = my_knnSmooth(patient_subset,gamma=10,k = 10)
plotHeatmap(patient_subset_filtered,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion"))
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
patient_subset_filtered = my_knnSmooth(patient_subset,gamma=10,k = 2)
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint","celltype"),
row_split = "simple_timepoint")
# brca2 = data.frame(ratio = as.numeric(assays(p19)$ratio[copykit::find_scaffold_genes(p19,"BRCA2")$pos,]),
#                    type=p19$celltype,time=p19$simple_timepoint,patient=p19$patient)
#  ggplot(data=brca2,aes(x=time,y=log2(ratio),col=type))  +
#    geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
#    theme_minimal() +
#    theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
brca2 = data.frame(ratio = as.numeric(assays(p19_c13)$ratio[copykit::find_scaffold_genes(p19_c13,"BRCA2")$pos,]),
type=p19_c13$celltype,time=p19_c13$simple_timepoint,patient=p19_c13$patient)
ggplot(data=brca2,aes(x=time,y=log2(ratio),col=type))  +
geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
library(ggplot2)
ggplot(data=brca2,aes(x=time,y=log2(ratio),col=type))  +
geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(data=brca2,aes(x=time,y=log2(ratio),col=type))  +
geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(data=brca2,aes(x=time,y=log2(ratio),shape=type,col=log2(ratio)))  +
geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(data=brca2,aes(x=time,y=log2(ratio),shape=type,col=log2(ratio))) + scale_color_viridis_c()  +
geom_jitter(width=0.1) + ggtitle("BRCA2-region log2ratios per Timepoint") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(data=brca2,aes(x=time,y=log2(ratio),shape=type,col=log2(ratio))) + scale_color_viridis_c()  +
geom_jitter(width=0.1) + ggtitle("BRCA2 Gene Locus Copy Number") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
findAneuploidCells
# set up some filters
patient_subset = findAneuploidCells(patient_subset, remove_XY = T, resolution = 2)
# set up some filters
patient_subset = findAneuploidCells(patient_subset, remove_XY = T, resolution = 1.1)
# set up some filters
patient_subset = findAneuploidCells(patient_subset, remove_XY = T, resolution = 0.1)
patient_subset = findAneuploidCells(patient_subset, remove_XY = T, resolution = 0.1)
patient_subset = runMetrics(patient_subset)
patient_subset$ratio_iqr = apply(abs(assays(patient_subset)$ratios - assays(patient_subset)$segment_ratios),2,iqr)
patient_subset$segment_max = log2(apply(assays(patient_subset)$segment_ratios,2,max))
patient_subset$segment_median = log2(apply(assays(patient_subset)$segment_ratios,2,median))
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","is_aneuploid"))
patient_subset = findOutliers(patient_subset)
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","is_aneuploid","outlier"))
patient_subset = findOutliers(patient_subset,resolution = 0.8)
#patient_subset = findOutliers(patient_subset,resolution = 0.8)
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","is_aneuploid","outlier"))
patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
patient_subset$reads_total > 5e5 &
patient_subset$reads_total < 5e7 &
patient_subset$pct_mapped_assigned > 0.8 &
abs(patient_subset$overdispersion) < 0.2
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells","is_aneuploid"),
row_split = "goodcells")
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","goodcells","is_aneuploid"),
row_split = "is_aneuploid")
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("ratio_iqr","overdispersion","segment_max","segment_median","outlier","is_aneuploid"),
row_split = "is_aneuploid")
# make a new filtered column
# patient_subset$goodcells = patient_subset$ratio_iqr < 0.3 &
#   patient_subset$reads_total > 5e5 &
#   patient_subset$reads_total < 5e7 &
#   patient_subset$pct_mapped_assigned > 0.8 &
#   abs(patient_subset$overdispersion) < 0.2
patient_subset$goodcells = patient_subset$outlier == FALSE & patient_subset$is_aneuploid == TRUE
plotHeatmap(patient_subset,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("goodcells"),
row_split = "goodcells")
# apply filter
patient_subset_smoothed = my_knnSmooth(patient_subset,gamma=10,k = 2)
plotHeatmap(patient_subset_smoothed,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("goodcells"),
row_split = "goodcells")
table(patient_subset$goodcells)
patient_subset_smoothed = findOutliers(patient_subset_smoothed,resolution = 0.8)
patient_subset_smoothed$goodcells = patient_subset_smoothed$outlier == FALSE & patient_subset_smoothed$is_aneuploid == TRUE
table(patient_subset$goodcells)
patient_subset_filtered = patient_subset_smoothed[,patient_subset_smoothed$goodcells == TRUE]
plotHeatmap(patient_subset_filtered,assay = 'segment_ratios',
order_cells = "hclust",
col = colorRamp2(c(-3, -1, 0, 1, 3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint"),row_split = "simple_timepoint")
patient_subset_filtered$goodcells
table(patient_subset_smoothed$goodcells)
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-3,-1, 0, 1,3),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint"),
row_split = "simple_timepoint")
brca2 = data.frame(ratio = as.numeric(assays(p19_c13)$ratio[copykit::find_scaffold_genes(p19_c13,"BRCA2")$pos,]),
type=p19_c13$celltype,time=p19_c13$simple_timepoint,patient=p19_c13$patient)
ggplot(data=brca2,aes(x=time,y=log2(ratio),shape=type,col=log2(ratio))) + scale_color_viridis_c()  +
geom_jitter(width=0.1) + ggtitle("BRCA2 Gene Locus Copy Number") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-2.5,-1, 0, 1,2.5),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint"),
row_split = "simple_timepoint")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-2.5,-1, 0, 1,2.5),
c("deepskyblue4","skyblue1", "white", "firebrick1","green")),
label = c("simple_timepoint"),
row_split = "simple_timepoint")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-2,-1, 0, 1,2),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint"),
row_split = "simple_timepoint")
p19_c13 = patient_subset_filtered[seqnames(patient_subset_filtered) == "chr13",]
plotHeatmap(p19_c13, n_threads = 4,
order_cells = 'hclust',assay = "segment_ratios",genes = c("BRCA2","RB1"),
col = colorRamp2(c(-4,-1, 0, 1,4),
c("deepskyblue4","skyblue1", "white", "firebrick1","firebrick4")),
label = c("simple_timepoint"),
row_split = "simple_timepoint")
wbc_clean
wbc_norm = wbc_clean
wbc_norm <- calcConsensus(wbc_norm,consensus_by = "batch",assay = 'bincounts')
c = consensus(wbc_norm)
plotHeatmap(wbc_norm,
col = colorRamp2(c(-1, 0, 1), c("dodgerblue", "white", "tomato")),
label = c("batch"))
wbc_norm <- calcConsensus(wbc_norm,consensus_by = "batch",assay = 'bincounts')
c = consensus(wbc_norm)
head(c)
assays(wbc_norm)$bincounts
assays(wbc_norm)$bincounts[,1]
plot(assays(wbc_norm)$bincounts[,1])
plot(assays(wbc_norm)$bincounts[,1],ylim=c(0,5000))
plot(assays(tumor)$bincounts[,1],ylim=c(0,5000))
plot(assays(tumor)$bincounts[,10],ylim=c(0,5000))
plot(assays(tumor)$bincounts[,10],ylim=c(0,10000))
plot(assays(tumor)$bincounts[,10] / c$b1,ylim=c(0,10000))
plot(assays(tumor)$bincounts[,10] / c$b1,ylim=c(0,2))
plot(assays(tumor)$bincounts[,10] / c$b1,ylim=c(0,3))
plot(assays(tumor)$bincounts[,10] / c$b1,ylim=c(0,5))
plot(log2(assays(tumor)$bincounts[,10] / c$b1),ylim=c(0,5))
plot(log2(assays(tumor)$bincounts[,10] / c$b1),ylim=c(-2,2))
plot(log2(assays(tumor)$bincounts[,10] / c$b1),ylim=c(-3,3))
plot(log2(assays(tumor)$bincounts[,10] / c$b1),ylim=c(-5,3))
plot(log2(assays(tumor)$bincounts[,10] / c$b1),ylim=c(-5,5))
plot(log2((assays(tumor)$bincounts[,10] / c$b1)*100),ylim=c(-5,5))
runVst
runSegmentation
plot(log2(assays(tumor)$bincounts[,10] / c$b1))
plot(log2(assays(tumor)$bincounts[,10] ))
plot(log2((assays(tumor)$bincounts[,10] /c$b1 ) * 10))
plot((assays(tumor)$bincounts[,10] /c$b1 ) * 10)
plot((assays(tumor)$bincounts[,50] /c$b1 ) * 10)
plot((assays(tumor)$bincounts[,50]  ) * 10)
plot((assays(tumor)$bincounts[,50]  ) * 10,ylim=c(0,5000))
plot((assays(tumor)$bincounts[,50]  ) * 10,ylim=c(0,50000))
plot((assays(tumor)$bincounts[,100]  ) * 10,ylim=c(0,50000))
plot((assays(tumor)$bincounts[,100]  / c$b1) * 10,ylim=c(0,50000))
plot((assays(tumor)$bincounts[,100]  / c$b1) * 10,ylim=c(0,100))
plot((assays(tumor)$bincounts[,100]  / c$b1) * 10,ylim=c(0,200))
plot((assays(tumor)$bincounts[,100]  / c$b1) * 10,ylim=c(0,50))
plot(log2((assays(tumor)$bincounts[,100]  / c$b1) * 10),ylim=c(0,50))
plot(log2((assays(tumor)$bincounts[,100]  / c$b1) * 10),ylim=c(0,50),pch=20)
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"],2,FUN = function(x) (x/c$b2)*10)
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"],2,FUN = function(x) (x/c$b2)*10)
wbc_norm = runVst(wbc_norm)
wbc_norm = runSegmentation(wbc_norm,method = "multipcf")
wbc_norm = logNorm(wbc_norm)
plotHeatmap(wbc_norm,
col = colorRamp2(c(-1, 0, 1), c("dodgerblue", "white", "tomato")),
label = c("batch"))
wbc_norm = wbc_clean
wbc_norm <- calcConsensus(wbc_norm,consensus_by = "batch",assay = 'bincounts')
c = consensus(wbc_norm)
plotHeatmap(wbc_norm,
col = colorRamp2(c(-1, 0, 1), c("dodgerblue", "white", "tomato")),
label = c("batch"))
# fix the WBCs first as a test
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"],2,FUN = function(x) (x/c$b1)*10)
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"],2,FUN = function(x) (x/c$b2)*10)
wbc_norm = runVst(wbc_norm)
wbc_norm = runSegmentation(wbc_norm,method = "multipcf")
wbc_norm = wbc_clean
wbc_norm <- calcConsensus(wbc_norm,consensus_by = "batch",assay = 'bincounts')
wbc_norm <- calcConsensus(wbc_norm,consensus_by = "batch",assay = 'bincounts')
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b1"],2,FUN = function(x) (x/c$b1)*10)
assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"] =
apply(assays(wbc_norm)$bincounts[,wbc_norm$batch == "b2"],2,FUN = function(x) (x/c$b2)*10)
wbc_norm = runVst(wbc_norm)
wbc_norm = runSegmentation(wbc_norm,method = "multipcf")
wbc_norm = runSegmentation(wbc_norm,method = "multipcf")
wbc_norm = runSegmentation(wbc_norm,method = "multipcf")
setwd("~/Documents/AoC/advent_of_code_2023/day5")
library(readr)
library(stringr)
input = readLines("day5_test.txt")
input = readLines("day5_input.txt")
#seeds
seedline = input[1]
seedline = gsub(x = seedline,pattern = "seeds: ",replacement = "")
seedstarts = unlist(str_split(seedline,pattern = " "))
seedstarts = as.numeric(seedstarts)
seedstarts = seedstarts+1
# find white spaces
spaces = which(input == "")
# find seed-soil map
seedsoil = which(input == "seed-to-soil map:")
seedspaces = min(spaces[spaces > seedsoil])
seedsoil_data = input[(seedsoil+1):(seedspaces -1)]
seedsoil_data = apply(str_split_fixed(seedsoil_data,pattern = " ",n = 3),MARGIN = 2,as.numeric)
seedsoil_data[,1:2] = seedsoil_data[,1:2] + 1
# find soil-fert map
soilfert = which(input == "soil-to-fertilizer map:")
soilspaces = min(spaces[spaces > soilfert])
soilfert_data = input[(soilfert+1):(soilspaces -1)]
soilfert_data = apply(str_split_fixed(soilfert_data,pattern = " ",n = 3),2,as.numeric)
soilfert_data[,1:2] = soilfert_data[,1:2] + 1
# find fert-water map
fertwater = which(input == "fertilizer-to-water map:")
fertspaces = min(spaces[spaces > fertwater])
fertwater_data = input[(fertwater+1):(fertspaces -1)]
fertwater_data = apply(str_split_fixed(fertwater_data,pattern = " ",n = 3),2,as.numeric)
fertwater_data[,1:2] = fertwater_data[,1:2] + 1
# find water-light map
waterlight = which(input == "water-to-light map:")
waterspaces = min(spaces[spaces > waterlight])
waterlight_data = input[(waterlight+1):(waterspaces -1)]
waterlight_data = apply(str_split_fixed(waterlight_data,pattern = " ",n = 3),2,as.numeric)
waterlight_data[,1:2] = waterlight_data[,1:2] + 1
# find light-temp map
lighttemp = which(input == "light-to-temperature map:")
lightspaces = min(spaces[spaces > lighttemp])
lighttemp_data = input[(lighttemp+1):(lightspaces -1)]
lighttemp_data = apply(str_split_fixed(lighttemp_data,pattern = " ",n = 3),2,as.numeric)
lighttemp_data[,1:2] = lighttemp_data[,1:2] + 1
# find temp-hum map
temphum = which(input == "temperature-to-humidity map:")
tempspaces = min(spaces[spaces > temphum])
temphum_data = input[(temphum+1):(tempspaces -1)]
temphum_data = apply(str_split_fixed(temphum_data,pattern = " ",n = 3),2,as.numeric)
temphum_data[,1:2] = temphum_data[,1:2] + 1
# find hum-loc map
humloc = which(input == "humidity-to-location map:")
humspaces = length(input)
humloc_data = input[(humloc+1):(humspaces)]
humloc_data = apply(str_split_fixed(humloc_data,pattern = " ",n = 3),2,as.numeric)
humloc_data[,1:2] = humloc_data[,1:2] + 1
# build the full data frame
df = data.frame(matrix(nrow = 0, ncol = 7))
colnames(df) = c("soil","fert","water","light","temp","hum","loc")
# map seed/soil
for (row in 1:nrow(seedsoil_data)) {
seed = seedsoil_data[row,2]:(seedsoil_data[row,2] + (seedsoil_data[row,3] -1))
soil = seedsoil_data[row,1]:(seedsoil_data[row,1] + (seedsoil_data[row,3] -1))
df[seed,"soil"] = soil
}
View(df)
library(usethis)
usethis::edit_r_environ()
